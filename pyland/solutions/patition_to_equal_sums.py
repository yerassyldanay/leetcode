from typing import List

def mprint(matrix: List) -> None:
    for row in matrix:
        print(row)


class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        summed = sum(nums)
        if summed % 2 == 1:
            return False

        # summed //= 2
        length = len(nums)

        dp = [[False] * (summed + 1) for _ in range(1 << length)]

        for y in range(1 << length):
            dp[y][0] = True

        for y in range(1, 1 << length):
            for num in nums:
                if y & num and y - num >= 0:
                    print(y - 1, num, y^num)
                    dp[y][num] |= dp[ y - 1 ][ y ^ num  ]

        mprint(dp)


if __name__ == "__main__":
    # nums
    nums = [1, 2, 1]
    s = Solution()
    a = s.canPartition(nums)
    print(a)

